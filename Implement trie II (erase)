#include <bits/stdc++.h> 
class Node{
    public:
    Node* links[26];
    int pre=0;
    int end=0;
};
class Trie{
    Node *root;
    public:

    Trie(){
        root=new Node();
    }

    void insert(string &word){
        Node *temp=root;
        for(int i=0;i<word.size();i++){
           if(temp->links[word[i]-'a']==NULL){
               temp->links[word[i]-'a']=new Node();
           }
           temp=temp->links[word[i]-'a'];
           temp->pre++;
        }
        temp->end++;
    }

    int countWordsEqualTo(string &word){
         Node *temp=root;
        for(int i=0;i<word.size();i++){
           if(temp->links[word[i]-'a']==NULL){
             return 0;
           }
           temp=temp->links[word[i]-'a'];
        }
        return temp->end;
    }

    int countWordsStartingWith(string &word){
        Node *temp=root;
        for(int i=0;i<word.size();i++){
           if(temp->links[word[i]-'a']==NULL){
             return 0;
           }
           temp=temp->links[word[i]-'a'];
        }
        return temp->pre;
    }

    void erase(string &word){
        Node *temp=root;
        for(int i=0;i<word.size();i++){
          if (temp->links[word[i] - 'a'] == NULL) {
            return;
          }
           temp=temp->links[word[i]-'a'];
           temp->pre--;
        }
        delete temp;
    }
};
