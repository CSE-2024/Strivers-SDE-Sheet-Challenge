/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* create_tree(int ps,int pe,int is,int ie,vector<int> &preorder,map<int,int> &mp){
        if(ps>pe||is>ie) return NULL;

        TreeNode *root=new TreeNode(preorder[ps]);
        int ind=mp[preorder[ps]];
        int leftlen=ind-is;
        int rightlen=ie-ind;
        root->left=create_tree(ps+1,ps+leftlen,is,ind-1,preorder,mp);
        root->right=create_tree(ps+1+leftlen,pe,ind+1,ie,preorder,mp);

        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int,int> mp;
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]]=i;
        }
        return create_tree(0,preorder.size()-1,0,inorder.size()-1,preorder,mp);
    }
};
