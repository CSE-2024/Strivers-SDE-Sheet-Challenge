#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isLeaf(TreeNode<int> *root){
    return root->left==NULL&&root->right==NULL;
}
void lefty(vector<int> &v,TreeNode<int> *root){
     while (root) {
    if (!isLeaf(root)) v.push_back(root -> data);
    if (root -> left) root = root -> left;
    else root = root -> right;
  }
}
void righty(vector<int> &v,TreeNode<int> *root){
     while (root) {
    if (!isLeaf(root)) v.push_back(root -> data);
    if (root -> right) root = root -> right;
    else root = root -> left;
  }
}
void bottom(vector<int> &v,TreeNode<int> *root){
  if (isLeaf(root)) {
    v.push_back(root -> data);
    return;
  }
  if (root -> left) bottom(v,root -> left);
  if (root -> right) bottom(v,root -> right);
    
}
vector<int> traverseBoundary(TreeNode<int>* root){
    vector<int> l,r,b,ans;

    if(root==NULL)
    return l;
    if (!isLeaf(root)) ans.push_back(root -> data);

    lefty(l,root->left);
    righty(r,root->right);
    bottom(b,root);
    reverse(r.begin(),r.end());

    for(auto it:l){
        ans.push_back(it);
    }
    for(auto it:b){
        ans.push_back(it);
    }
    for(auto it:r){
        ans.push_back(it);
    }
    return ans;
}
