/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* create_root(int ps,int pe,int is,int ie,vector<int> &postorder,unordered_map<int,int> &mp)
    {
        if(ps>pe||is>ie) return NULL;
        
        TreeNode* root=new TreeNode(postorder[pe]);
        int leftlen=mp[postorder[pe]]-is;
        int rightlen=pe-mp[postorder[pe]];

        root->left=create_root(ps,ps+leftlen-1,is,mp[postorder[pe]]-1,postorder,mp);
        root->right=create_root(ps+leftlen,pe-1,mp[postorder[pe]]+1,ie,postorder,mp);

        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int> mp;
        for(int i=0;i<inorder.size();i++){
            mp[inorder[i]]=i;
        }
        return create_root(0,postorder.size()-1,0,inorder.size()-1,postorder,mp);
    }
};
