#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    vector<pair<int,int>> adj[vertices];
    for(auto it:vec){
        adj[it[0]].push_back({it[2],it[1]});
        adj[it[1]].push_back({it[2],it[0]});
    }
    vector<int> dis(vertices,1e13);
    dis[source]=0;
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
    q.push({0,source});
    while(!q.empty()){
        int dist=q.top().first;
        int node=q.top().second;q.pop();
        for(auto it:adj[node]){
            int dnode=it.second;
            int ddist=it.first;
            if(dis[dnode]>dist+ddist){
                dis[dnode]=dist+ddist;
                q.push({dis[dnode],dnode});
            }
        }
    }
    return dis;
}
