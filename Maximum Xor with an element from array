struct Node{
    Node* links[2];
};
class Trie{
    Node *root;
    public:
    Trie(){
        root=new Node();
    }
    void insert(int n){
        Node *temp=root;
        for(int i=31;i>=0;i--){
            int t=(n>>i)&1;
            if(temp->links[t]==NULL){
                temp->links[t]=new Node();
            }
            temp=temp->links[t];
        }
    }
    int findmax(int x){
        int num=0;
        Node *temp=root;
        for(int i=31;i>=0;i--){
            int t=(x>>i)&1;
            if(temp->links[!t]!=NULL){
               num+=(int)pow(2,i);
               temp=temp->links[!t];
            }
            else
            temp=temp->links[t];
        }
        return num;
    }
};
class Solution {
public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> que;
        for(int i=0;i<queries.size();i++){
             que.push_back({queries[i][1],queries[i][0],i});
        }
        sort(que.begin(),que.end());
        vector<int> ans(queries.size());
        int ind=0;
        Trie *t=new Trie();
        for(auto it:que){
           while(nums[ind]<=it[0]&&ind<nums.size()){
               t->insert(nums[ind]);
               ind++;
           }
           if(ind!=0)
           ans[it[2]]=t->findmax(it[1]);
           else ans[it[2]]=-1;
        }
        return ans;
    }
};
