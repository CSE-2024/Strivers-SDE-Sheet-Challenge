class Solution {
public:
    vector<vector<string>>ans;
    void solve(int row,int &n,vector<string> &vtr,vector<pair<int,int>> &queens){
     if(row==n){
         ans.push_back(vtr);
         return ;
     }
         for(int i=0;i<n;i++){
             int x=row;
             int y=i;
             int m=-1;
             for(auto it:queens){
                 int c1=it.first;
                 int c2=it.second;
                 if(c2==y){m=1;break;}
                 int p=c1,q=c2,flag=0;
                 while(p>=0&&q>=0){
                     p--;q--;
                     if(p==x&&q==y){flag=1;break;}
                 }
                 if(flag==1){m=1;break;}
                 p=c1;q=c2;
                 while(p>=0&&q<n){
                     p--;q++;
                     if(p==x&&q==y){flag=1;break;}
                 }
                 if(flag==1) {m=1;break;}
                 p=c1;q=c2;
                 while(p<n&&q>=0){
                     p++;q--;
                     if(p==x&&q==y){flag=1;break;}
                 }
                 if(flag==1) {m=1;break;}
                 p=c1;q=c2;
                 while(p<n&&q<n){
                     p++;q++;
                     if(p==x&&q==y){flag=1;break;}
                 }
                 if(flag==1) {m=1;break;}
                }
                if(m==-1){
                    vtr[x][y]='Q';
                 queens.push_back({x,y});
                 solve(row+1,n,vtr,queens);
                 vtr[x][y]='.';
                 queens.pop_back();
                }
            }
    }
        
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res; 
        for(int i=0;i<n;i++){
            vector<pair<int,int>> queens;
            vector<string> vtr;
        for(int i=0;i<n;i++){
            string str="";
            for(int j=0;j<n;j++)
            str+='.';

            vtr.push_back(str);
        }
            vtr[0][i]='Q';
            queens.push_back({0,i});
           solve(1,n,vtr,queens);
        }
        return ans;
    }
};
