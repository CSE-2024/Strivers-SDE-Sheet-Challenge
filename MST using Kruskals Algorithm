#include <bits/stdc++.h>
class Disjoint{
	public:
	vector<int> parent,size;

	Disjoint(int n){
		parent.resize(n+1);
		size.resize(n+1,1);
		for(int i=1;i<=n;i++){
			parent[i]=i;
		}
	}
	int find(int node){
		if(parent[node]==node) return node;

		return parent[node]=find(parent[node]);
	}
	void unionbysize(int a,int b){
		int pa=find(a);
		int pb=find(b);
		if(pb==pa) return;

		if(pb>pa){
			parent[pa]=pb;
			size[pb]+=size[pa];
		}
		else{
			parent[pb]=pa;
			size[pa]+=size[pb];
		}
	}
}; 
int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	vector<pair<int,pair<int,int>>> edges;
	for(auto i:graph){
			edges.push_back({i[2],{i[0],i[1]}});
			edges.push_back({i[2],{i[1],i[0]}});
	}
	Disjoint ds(n+1);
	sort(edges.begin(),edges.end());
    int sum=0;
	for(auto it:edges){
		int a=it.second.first;
		int b=it.second.second;
        int wt=it.first;
		if(ds.find(a)!=ds.find(b)){
           sum+=wt;
		   ds.unionbysize(a,b);
		}
	}
	return sum;
}
