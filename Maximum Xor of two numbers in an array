struct Node{
    Node* links[2];
};
class Trie{
    Node *root;
    public:
    Trie(){
        root=new Node();
    }
    void insert(int n){
        Node *temp=root;
        for(int i=31;i>=0;i--){
            int t=(n>>i)&1;
            if(temp->links[t]==NULL){
                temp->links[t]=new Node();
            }
            temp=temp->links[t];
        }
    }
    int findmax(int x){
        int num=0;
        Node *temp=root;
        for(int i=31;i>=0;i--){
            int t=(x>>i)&1;
            if(temp->links[!t]!=NULL){
               num+=(int)pow(2,i);
               temp=temp->links[!t];
            }
            else
            temp=temp->links[t];
        }
        return num;
    }
};
class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        Trie *t=new Trie();
        for(int i=0;i<nums.size();i++){
            t->insert(nums[i]);
        }
        int ans=0;
        for(int i=0;i<nums.size();i++){
           ans=max(ans,t->findmax(nums[i]));
        }
        return ans;
    }
};
